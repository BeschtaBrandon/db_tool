<?xml version="1.0"?>
<project name="AutoDbService_Compile_Script" default="normal_build" basedir="..\">
  <property environment="env" />
  <property file="ant/ant-global.properties" />
  <property name="IsCoverageBuild" value="false"/> 
  <property name="tarFile" value="MrAlert.tar"/>
  <property name="dir.standalone" value="standalone"/>
  <property name="dir.dist" value="dist"/>
  <property name="masterctl.nas.dir" value="\\cobaltbuilds\cobaltbuild$\Cobalt Infrastructure"/>
  <property name="dir.conf" value="conf"/>
  <property name="dir.properties" value="properties"/>
  <property name="dir.resources" value="resources"/>
  
  <!--- - - - - - - - - - - - - - - - -
           Create the master class path that will be used by all targets in the script. 
          - - - - - - - - - - - - - - - - - -->
  <path id="classpath.compile">
    <fileset dir="${dir.librariesPath}">
      <include name="**/*.jar"/>
    </fileset>
    <!-- These are the cobalt group specific libraries that all the projects should include. -->
    <fileset dir="${env.buildextensionroot}">
      <include name="JUnit/*.jar"/>
      <include name="OtherLibraries/**/*.jar"/>
    </fileset>
  </path>

  <!-- =================================
          target: normal_build
          description: This is the entry target for a "normal" build. It will compile the main source 
                       code and the unit tests. Integration tests will not be compiled since 
                       it is part of the coverage build. 
         ================================= -->
  <target name="normal_build" description="Normal build for the MrAlert project" depends="-init, -compile, -compile_unitTests, -createJar, -organize, -compress_tar">
    <echo level="info" message="Normal (aka Non-Coverage) build has completed." />
  </target>

  <!-- =================================
          target: coverage_build
          description: This is the entry target for a "coverage" build. It will compile the
                       main source code, unit tests and integration tests.
         ================================= -->
  <target name="coverage_build" description="Coverage build for the MrAlert project" depends="-init, -compile">
    <echo level="info" message="Coverage build has completed." />
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: -init
          description: Perform all initialization tasks like cleaning up old compiled code, 
                       create directories that do not exist, etc.
         - - - - - - - - - - - - - - - - - -->
  <target name="-init">
    <echo level="verbose">Deleting old compiled binaries, if existing...</echo>
    <delete dir="${dir.binaries}" failonerror="false" includeemptydirs="true"/>
    <delete dir="${dir.testBinaries}" failonerror="false" includeemptydirs="true"/>

    <echo level="verbose">Creating directories for the compiled binaries - '${dir.binaries}' and '${dir.testBinaries}' ...</echo>
    <mkdir dir="${dir.binaries}"/>
  	<mkdir  dir="standalone\cobalt"/>
    <mkdir dir="${dir.testBinaries}"/>
  	<mkdir  dir="${dir.tmpBuildDir}"/>
  	<mkdir  dir="${dir.dist}"/>  	
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
           target: -compile                      
           description: Compile the source code and place the compiled libraries in the respective 
                        folder. The code will be compiled using version 1.6 of the SDK.
         - - - - - - - - - - - - - - - - - -->
  <target name="-compile">
    <echo level="verbose">Compiling the source code...</echo>
    <javac destdir="${dir.binaries}" source="1.7" target="1.7"
          debug="true">  <!-- Enabled debugging as per the development team's request-->
      <src path="${dir.source}"/>
      <classpath refid="classpath.compile"/>
    </javac>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: -compile_unitTests                      
          description: Compile the unit test source code and place the compiled libraries in the 
                       respective binary folder. The code will be compiled using version 1.6 of the SDK.
         - - - - - - - - - - - - - - - - - -->
  <target name="-compile_unitTests">
    <echo level="verbose">Compiling the unit test source code...</echo>
    <javac destdir="${dir.testBinaries}" source="1.6" target="1.6" encoding="iso-8859-1" >
      <src path="${dir.unitTestSource}" />
      <classpath>
        <pathelement path="${dir.binaries}" />
        <path refid="classpath.compile" />
      </classpath>
    </javac>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: -createJar                      
          description: Package the compiled code into a JAR.
         - - - - - - - - - - - - - - - - - -->
  <target name="-createJar" >
    <echo level="verbose">Packaging the code into a JAR file...</echo>
    <jar jarfile="${path.jarFile}" >
      <fileset dir="${dir.binaries}" casesensitive="yes">
        <exclude name="**/*.java"/>
      </fileset>
    </jar>
  </target>
	<!-- organize the code as you need it. -->
		  <target name="-organize" description="organizes the code so we can compress it into a tar ball.">

		    <!-- first unzip the master-ctl library -->
        <unzip src="${masterctl.nas.dir}\master-ctl_10.3.0.zip" dest="standalone"/>
		  	
		<!-- Specific request from Developer to add log4j property file -->		  	
		  	<copy todir="${dir.standalone}/cobalt">
		      <fileset dir="${dir.source}">
		        <include name="log4j.properties"/>
		      </fileset>
		  	</copy>
		  	
		    <copy todir="${dir.standalone}/cobalt">
		      <fileset dir="${dir.tmpBuildDir}">
		        <include name="${jarFilename}"/>
		      </fileset>
		    </copy>

		    <copy todir="${dir.standalone}/lib">
		      <fileset dir="${dir.librariesPath}"/>
		    </copy>

        <copy todir="${dir.standalone}/conf">
          <fileset dir="${dir.conf}"/>
        </copy>
        
        <copy todir="${dir.standalone}/resources">
          <fileset dir="${dir.resources}"/>
        </copy>

        <copy todir="${dir.standalone}/properties">
          <fileset dir="${dir.properties}"/>
        </copy>
        
		    <copy todir="${dir.standalone}/bin">
		      <fileset dir="bin">
		        <include name="*.sh"/>
		      </fileset>
		    </copy>
        
        <!-- Copy the properties files to dist folder-->
        <copy todir="${dir.dist}">
          <fileset dir="${dir.resources}"/>
        </copy>

      </target>
  <!-- Use tar task to compress deliverables. -->
		  <target name="-compress_tar" description="compress the deliverable into a tar ball for deployment">
	      <tar destfile="${dir.dist}/${tarFile}">
	        <tarfileset filemode="744" dir="${dir.standalone}">
	          <include name="**/*"/>
	        </tarfileset>
	      </tar>
		</target>
  
</project>
